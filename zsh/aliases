# Command Enhancements
source ~/.dotfiles/zsh/agilebits

# For bridging my homegrown Projects plugin to PJ plugin
alias p='pj'
alias po='pjo'
# Utility
alias reload='source ~/.dotfiles/zsh/aliases'
alias ea='vim ~/.dotfiles/zsh/aliases && reload' # Edit aliases
alias ee="vim ~/.dotfiles/zsh/zshenv"

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  zip -r $1.zip $1
}

# Finder
alias o='open . &'
alias ff='open -a Firefox'

# General code

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Git
alias gitx="gittower ."
alias go="git log --pretty=format:\"%C(bold blue)%h%C(reset)%x09%C(bold white)— %an%C(reset)%x09%x09%C(bold yellow)%ad%C(reset)%x09%s\""
alias go1="git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative"
alias go2="git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit"
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# Commit pending changes and quote all args as message
function gg() { 
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdt='git difftool -y'
alias gdc='gdt -t Changes'
alias gdk='gdt -t Kaleidoscope'
alias gdm='git diff master'
alias gl='git pull'
alias glr='git pull --rebase'
alias gsl='git submodule foreach git pull && git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='subl .git/config'
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}

# Regenerate TAGS file from file arguments
function ct() {
  rm -f TAGS
  etags --append --output=TAGS $*
}

# TextMate points to sublime text now
alias m="s"
alias mm="ss"

# Sublime Text
alias s="subl"
alias ss="if [ "$(find . -name '*.sublime-project' -maxdepth 1 | wc -l)" == "1" ]; then find . -name '*.sublime-project' -maxdepth 1 -exec subl --project "{}" \+; else subl .; fi"

# Ruby
alias r="rake"
alias be="bundle exec"
function mmd() { 
mmd $1 > $1.html 
}

# Rails
alias rp='touch tmp/restart.txt'
alias sc='rails c'
alias sg='rails g'
alias tl='tail -f log/*.log'
alias rt='rake test:all'
alias rta='rt'
alias rtm='rake test:models'
alias rtf='rake test:functionals'
alias rti='rake test:integration'


# TDD / BDD

alias aa='autotest'
alias aaf='autotest -f' # Don't run all at start
alias aas="./script/autospec"

# Setup a tunnel
function haproxyssh() { 
  ssh -L7997:127.0.0.1:7997 deploy@$1.com 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() { 
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
}

alias ox="open *.xcodeproj"

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

alias jsc='/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc'
alias ddd='rm -rf ~/Library/Developer/Xcode/DerivedData/*'
