# Utility
alias reload='source $XDG_CONFIG_HOME/zsh/aliases'
alias ea="$EDITOR $XDG_CONFIG_HOME/zsh/aliases && reload" # Edit aliases
alias ee="$EDITOR $XDG_CONFIG_HOME/zsh/zshenv"

# Common -- Some are from Damian Conway
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
# alias h='history'
alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () { 
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
}
function zipr() {
  zip -r $1.zip $1
}

# Markdown
marked() {
	open -a "Marked 2" $1
}

# Finder
alias o='open .'

function bundleid() {
  defaults read "$1/Contents/Info.plist" CFBundleIdentifier
}

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

# Git
alias gitp='git'
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gl="git pull"
alias glr="git pull --rebase"
alias gsl="git submodule foreach git pull && git pull"
alias gst="git status"
alias g="git"
alias eg="$EDITOR .git/config"
# Git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# Setup a tracking branch from [remote] [branch_name]
function gbt() { 
  git branch --track $2 $1/$2 && git checkout $2 
}
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}

# Give silver_searcher a default set of ignore files
alias ag='ag -p "$DOTFILES/ag/ignore"'

# Ruby
alias r="rake"
alias be="bundle exec"
function mmd() { 
mmd $1 > $1.html 
}

function aiff2mp3() { 
  lame -h -V 0 $1.aif $1.mp3 
}
function wav2mp3() { 
  lame -h -V 0 $1.wav $1.mp3 
}


# XCode
# Analyze release build
alias sx="xcodebuild clean && ~/src/checker-0.146/scan-build -k -V xcodebuild"
# Analyze test build
alias sxt="xcodebuild -target Test clean && ~/src/checker-0.146/scan-build -k -V xcodebuild -target Test"
# Call with -target Foo
function sxx() { 
  xcodebuild $* clean && ~/src/checker-0.146/scan-build -k -V xcodebuild $* 
}

alias ox="open *.xcodeproj"

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

alias jsc='/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc'
alias ddd='rm -rf ~/Library/Developer/Xcode/DerivedData/*'

function circle() {
  echo "$1" | tr "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" "ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ⓪①②③④⑤⑥⑦⑧⑨"
}

function smallcap() {
  echo "$1" | tr "abcdefghijklmnopqrstuvwxyz" "ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘǫʀꜱᴛᴜᴠᴡxʏᴢ"
}


function strip_diff_leading_symbols(){
    color_code_regex=$'(\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K])'

        # simplify the unified patch diff header
        sed -E "s/^($color_code_regex)diff --git .*$//g" | \
               sed -E "s/^($color_code_regex)index .*$/\
\1$(rule)/g" | \
               sed -E "s/^($color_code_regex)\+\+\+(.*)$/\1\+\+\+\5\\
\1$(rule)/g" | \

        # actually strips the leading symbols
               sed -E "s/^($color_code_regex)[\+\-]/\1 /g"
}

## Print a horizontal rule
rule () {
        printf "%$(tput cols)s\n"|tr " " "─"
}


set-window-title() {
	
	echo -ne "\e]1;$PWD\a"

	# window-title=""
	# project-path=$(pwd)
	# project-name=${project-path##$HOME/Projects/AG/}
	# if [ $project-name != $project-path ]
	# 	window-title="AgileBits"
	# 	if [ ${project-name##b5} ]
	# 		window-title="$window-title - B5"
	# 	elsif [ ${project-name##agilebits} ]
	# 		window-title="$window-title - website"
	# 	elsif [ ${project-name##onepassword-brain} ]
	# 		window-title="$window-title - Brain"
	# 	elsif [ ${project-name##onepassword
	# 	fi
	# fi
}

set-tab-title() {
	echo -ne "\e]1;$PWD\a"
}
chpwd_functions+=(set-window-title set-tab-title)
preexec_functions+=(set-window-title set-tab-title)
