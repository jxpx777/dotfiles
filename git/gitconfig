[user]
	name = Jamie Phelps
	email = jamie@epiphanymedia.net
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
[push]
	default = tracking
[alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff
    lg = log
	 up = pull
	 pu = push
[github]
	user = jxpx777
	token = 3289514529438a440471c46ab0361bf8
[core]
	excludesfile = /Users/j/.dotfiles/git/gitignore
	editor = "subl -w"
[branch]
	autosetupmerge = true
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "Changes"]
	cmd = /usr/bin/env chdiff $LOCAL $REMOTE
[difftool]
	prompt = false
[diff]
	tool = Kaleidoscope

[merge]
	tool = Kaleidoscope
[mergetool "Changes"]
       cmd = /usr/bin/env chdiff --wait "$LOCAL" "$REMOTE"
       keepBackup = false
       trustExitCode = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[mergetool]
	prompt = false
	keepBackup = true
[url "https://github.com/"]
  insteadOf = github:
[url "git@bitbucket.org:agilebitsinc/"]
  insteadOf = agilebits:
[merge "railsschema"]
	name = newer Rails schema version
	driver = "ruby -e '\n\
		system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
		b = File.read(%(%A))\n\
		b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
		  %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
		end\n\
		File.open(%(%A), %(w)) {|f| f.write(b)}\n\
		exit 1 if b.include?(%(<)*%L)'"
[merge "safariextensioninfoplist"]
  name = newer Builder Version
	driver = "ruby -e '\n\
		system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
		b = File.read(%(%A))\n\
    b.sub!(%r{^\t<key>Builder Version</key>\n<+ .*\n\\t<string>((?:\\d+\\.)+\\d+)</string>\n=+\n\\t<string>((?:\\d+\\.)+\\d+)</string>\n>+ .*}) do\n\
		  %(<key>Builder Version</key>\n\t<string>#{[$1, $2].max}</string>)\n\
		end\n\
		File.open(%(%A), %(w)) {|f| f.write(b)}\n\
		exit 1 if b.include?(%(<)*%L)'"

[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
