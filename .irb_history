Api::Sources::PirateWeather.new
p = _
p.hourly
p.currently.temperature
exit
1.0.to_i
1.2.to_i
1.999999.to_i
val
exit
1653451200 - 1653282000
_/3600
Time.zone.at(1653451200)
Time.zone.at(1653282000)
exit
Time.now
exit
Time.at(1653624000, in: "America/Detroit")
Time.at(1653624000, in: "-04:00")
Time.at(1653627600, in: "-05:00")
Time.at(1653627600, in: "UTC")
Time.at(1653624000, in: "UTC")
exit
'3.55' * 5
'3.55'  5
'3.55' / 5
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan(divisor)\
  end\
end
'abcdefg'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan('.'*divisor)\
  end\
end
'abcdefg'/3
'abcdefg'/3
'abcdefg'.scan('...')
'abcdefg'.scan(/.../)
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan(RegExp.new('.'*divisor))\
  end\
end
'abcdefg'.scan(/.../)
'abcdefg'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan(Regexp.new('.'*divisor))\
  end\
end
'abcdefgh'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan(Regexp.new('.'*divisor)) if self.length % divisor == 0\
  end\
end
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [self[length%divisor * -1]]\
  end\
end
'abcdefgh'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [slice(length%divisor * -1)]\
  end\
end
'abcdefgh'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]\
  end\
end
'abcdefgh'/3
'abcdef'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]\
  end\
end
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan new Regexp('.'*divisor) if length % divisor == 0\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]\
  end\
end
'abcdef'/3
class String\
  def /(divisor)\
    return self if divisor == 0\
    return self if divisor == 1\
    return self.scan Regexp.new('.'*divisor) if length % divisor == 0\
    self.scan(Regexp.new('.'*divisor)) + [self[(length%divisor * -1..length)]]\
  end\
end
'abcdef'/3
'abcdefgh'/3
exit
1/0
0.0/0.0
exit
URI.new("http://http://http://@http://http://?http://#http://")
clear4
exit
require 'uri'
URI.parse("http://http://http://@http://http://?http://#http://")

URI.parse("http://http://http://@http://http://?http://#http://")
_.to_h
URI.parse("http://http://http://@http://http://?http://#http://")
URI.extract("http://http://http://@http://http://?http://#http://")
URI.parse("http://http://http://@http://http://?http://#http://")
uri = URI.parse("http://http://http://@http://http://?http://#http://")
uri.hostname
uri.scheme
uri.path
uri.port
uri.host
exit
[].class
[].superclass
[].parent.class
[].parent_class
[].superclass
[].class.superclass
exit
[].class
[].class.superclass
[].class.superclass.superclass
[].class.superclass.superclass.superclass
{ :foo => nil }.has_key? :foo
1 === "1"
"1" === Integer
Integer === "1"
exit
3755.to_s.rjust(5, "0")
3755.to_s.rjust(25, "&")
exit
require 'csv'
require 'json'
CSV.read('/Users/jp/code/hackathon/locations.csv')
CSV.read('/Users/jp/code/hackathon/locations.csv')
csv = CSV.new('/Users/jp/code/hackathon/locations.csv', headers: :first_row)
csv.to_h
csv = CSV.new(File.read('/Users/jp/code/hackathon/locations.csv'), headers: :first_row)
csv.to_h
csv
csv.rows
csv.read
csv = CSV.parse(File.read('/Users/jp/code/hackathon/locations.csv'), headers: :first_row)
csv.to_json
csv = CSV.parse(File.read('/Users/jp/code/hackathon/locations.csv'))
csv.to_json
csv.to_h
csv.headers
csv = CSV.parse(File.read('/Users/jp/code/hackathon/locations.csv'), headers: :first_row)
csv.headers
csv.to_json
csv.headers
csv.to_json
csv.map { |obj| csv.headers.zip obj }
csv.map { |obj| puts obj; csv.headers.zip obj }
exit
csv = CSV.parse(File.read('/Users/jp/code/hackathon/locations.csv'), headers: :first_row)
require 'csv'
require 'json'
csv = CSV.parse(File.read('/Users/jp/code/hackathon/locations.csv'), headers: :first_row)
csv.headers.zip(csv.rows)
csv.by_row
csv.headers.zip(csv.by_row)
csv.by_row.map { |row| csv.headers.zip row.to_a }

csv.by_row.map { |row| csv.headers.zip row }
csv.by_row.to_a
csv.by_row.slice(0,2).map { |row| csv.headers.zip row }
csv.by_row.to_a.slice(0,2).map { |row| csv.headers.zip row }
csv.by_row.to_a.slice(1,2).map { |row| csv.headers.zip row }
csv.by_row.to_a.slice(1,2).map { |row| csv.headers.zip row }.to_h
Hash.new(csv.by_row.to_a.slice(1,2).map { |row| csv.headers.zip row })
Hash.new(csv.by_row.to_a.slice(1,2).map { |row| csv.headers.zip row }[0])
Hash.new(csv.by_row.to_a.slice(1,2).map { |row| csv.headers.zip row }[0][0])
        csv.by_row.to_a.slice(1,2).map { |row| Hash.new {|key, hash| row[csv.headers.index(key)] }  })
        csv.by_row.to_a.slice(1,2).map { |row| Hash.new {|key, hash| row[csv.headers.index(key)] }  }
body = File.read("/Users/jp/code/hackathon/locations.csv")
csv = CSV.new(body, :headers => true, :header_converters => :symbol, :converters => :all)

JSON.dump _
JSON.dump _
csv = CSV.new(body, :headers => true, :header_converters => :symbol, :converters => :all)
hashes = csv.to_a.map {|row| row.to_hash }
json = hashes.to_json
File.write("/Users/jp/code/hackathon/locations.json", json)
exit
exit
require 'csv'
exit
exit
a = [ 1, 2, [3, [4, 5] ] ]
a.flatten
a.flatten(0)
a.flatten(1)
a.flatten(2)
a.flatten(3)
exit
